---
name: "Flake.lock: update Nix dependencies (Verified)"
on:
  workflow_dispatch: # allows manual triggering
  schedule:
    - cron: 0 0 * * 0 # runs weekly on Sunday at 00:00

env:
  BRANCH: "main"
  FILES_TO_COMMIT: "flake.lock"     # multi files: "flake.lock, another/file.txt"
  COMMIT_MESSAGE: "chore(lockfile): auto update flake.lock"
  GIT_NAME: "github-actions[bot]"
  GIT_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"

jobs:
  nix-flake-update:
    permissions:
      contents: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nix
        uses: DeterminateSystems/determinate-nix-action@v3

      - name: Check Nix flake inputs
        uses: DeterminateSystems/flake-checker-action@v12
        with:
          ignore-missing-flake-lock: false
          fail-mode: true

      - name: Update flake.lock
        run: |
          nix flake update

      - name: Detect changes
        id: diff
        shell: bash
        run: |
          set -euo pipefail
          files=$(echo "${FILES_TO_COMMIT}" | tr ',' ' ')
          git add -N $files || true
          if git diff --quiet -- $files; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit via REST Contents API (Verified)
        if: steps.diff.outputs.changed == 'true'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const owner   = context.repo.owner;
            const repo    = context.repo.repo;
            const branch  = process.env.BRANCH;
            const message = process.env.COMMIT_MESSAGE;
            const name    = process.env.GIT_NAME;
            const email   = process.env.GIT_EMAIL;

            const files = process.env.FILES_TO_COMMIT
              .split(',')
              .map(s => s.trim())
              .filter(Boolean);

            for (const path of files) {
              core.info(`Processing ${path} on branch ${branch}â€¦`);
              const content = fs.readFileSync(path, { encoding: 'base64' });

              let sha;
              try {
                const res = await github.rest.repos.getContent({ owner, repo, path, ref: branch });
                if (!Array.isArray(res.data)) {
                  sha = res.data.sha;
                  core.info(`Found existing ${path} (sha=${sha})`);
                } else {
                  core.warning(`'${path}' resolved to a directory listing unexpectedly`);
                }
              } catch (e) {
                if (e.status === 404) {
                  core.info(`${path} does not exist yet (first commit for this file).`);
                } else {
                  throw e;
                }
              }

              const r = await github.rest.repos.createOrUpdateFileContents({
                owner, repo, path,
                message,
                content,
                branch,
                sha,  // null if not exist
                committer: { name, email },
                author:    { name, email },
              });

              core.info(`Committed ${path}: ${r.data.commit.sha}`);
              core.info(`URL: ${r.data.content && r.data.content.html_url ? r.data.content.html_url : r.data.commit.html_url}`);
            }

      # - uses: stefanzweifel/git-auto-commit-action@v7
      #   with:
      #     commit_message: "chore(lockfile): auto update flake.lock"
      #     commit_user_name: "github-actions[bot]"
      #     commit_user_email: "41898282+github-actions[bot]@users.noreply.github.com"
      #     commit_author: "github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"
      #     file_pattern: "flake.lock"
