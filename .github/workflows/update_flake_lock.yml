---
name: "Flake.lock: update Nix dependencies (Verified)"
on:
  workflow_dispatch: # allows manual triggering
  schedule:
    - cron: 0 0 * * 0 # runs weekly on Sunday at 00:00

env:
  BRANCH: "main"
  COMMIT_MESSAGE: "chore(lockfile): auto update flake.lock"
  GIT_NAME: "github-actions[bot]"
  GIT_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"

jobs:
  nix-flake-update:
    permissions:
      contents: write
      id-token: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nix
        uses: DeterminateSystems/determinate-nix-action@v3

      - name: Check Nix flake inputs
        uses: DeterminateSystems/flake-checker-action@v12
        with:
          ignore-missing-flake-lock: false
          fail-mode: true

      - name: Update flake.lock
        run: |
          nix flake update

      - name: Detect modified files
        id: diff
        shell: bash
        run: |
          set -euo pipefail
          # List modified (tracked) files relative to HEAD.
          # If you only want specific patterns, add a grep here (e.g., grep -E '(^|/)flake\.lock$').
          mapfile -t changed < <(git ls-files -m --full-name)

          if [ "${#changed[@]}" -eq 0 ]; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
            echo "changed_files=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Join into a comma-separated string for downstream steps.
          IFS=',' read -r -a _ <<< ""
          changed_csv="$(printf "%s," "${changed[@]}")"
          changed_csv="${changed_csv%,}"

          echo "Changed files:"
          printf ' - %s\n' "${changed[@]}"

          echo "changed=true" >> "$GITHUB_OUTPUT"
          echo "changed_files=${changed_csv}" >> "$GITHUB_OUTPUT"

      - name: Commit via Git Database API (server-side signed → Verified)
        if: steps.diff.outputs.changed == 'true'
        uses: actions/github-script@v8
        env:
          CHANGED_FILES: ${{ steps.diff.outputs.changed_files }}
        with:
          script: |
            const fs = require('fs');

            // --- Inputs / env ---
            const owner   = context.repo.owner;
            const repo    = context.repo.repo;
            const branch  = process.env.BRANCH;
            const message = process.env.COMMIT_MESSAGE;
            const name    = process.env.GIT_NAME;
            const email   = process.env.GIT_EMAIL;

            // Parse changed files (comma-separated)
            const changedCsv = process.env.CHANGED_FILES || '';
            const files = changedCsv.split(',').map(s => s.trim()).filter(Boolean);
            if (files.length === 0) {
              core.info('No changed files to commit.');
              return;
            }

            // 1) Resolve current HEAD of the target branch
            const refResp = await github.rest.git.getRef({
              owner, repo, ref: `heads/${branch}`
            });
            const headSha = refResp.data.object.sha;
            core.info(`Current ${branch} head: ${headSha}`);

            // 2) Get base tree from the head commit
            const headCommit = await github.rest.git.getCommit({
              owner, repo, commit_sha: headSha
            });
            const baseTreeSha = headCommit.data.tree.sha;
            core.info(`Base tree: ${baseTreeSha}`);

            // 3) Create blobs for each changed file
            const treeEntries = [];
            for (const path of files) {
              core.info(`Creating blob for: ${path}`);
              // Read file as base64; Git DB API expects raw content + encoding flag.
              const contentB64 = fs.readFileSync(path, { encoding: 'base64' });
              const blob = await github.rest.git.createBlob({
                owner, repo,
                content: contentB64,
                encoding: 'base64'
              });
              treeEntries.push({
                path,
                mode: '100644',
                type: 'blob',
                sha: blob.data.sha
              });
            }

            // 4) Create a new tree based on the base tree + our entries
            const newTree = await github.rest.git.createTree({
              owner, repo,
              base_tree: baseTreeSha,
              tree: treeEntries
            });
            const newTreeSha = newTree.data.sha;
            core.info(`New tree: ${newTreeSha}`);

            // 5) Create a commit with the new tree
            const commitResp = await github.rest.git.createCommit({
              owner, repo,
              message,
              tree: newTreeSha,
              parents: [headSha],
              author:    { name, email },
              committer: { name, email }
            });
            const newCommitSha = commitResp.data.sha;
            core.info(`New commit: ${newCommitSha}`);

            // 6) Concurrency guard: ensure branch head has not moved
            const refNow = await github.rest.git.getRef({
              owner, repo, ref: `heads/${branch}`
            });
            const currentHead = refNow.data.object.sha;
            if (currentHead !== headSha) {
              core.setFailed(`Branch '${branch}' moved from ${headSha} to ${currentHead} during update. Aborting to avoid losing commits.`);
              return;
            }

            // 7) Update branch ref to the new commit (non-forced)
            await github.rest.git.updateRef({
              owner, repo,
              ref: `heads/${branch}`,
              sha: newCommitSha,
              force: false
            });
            core.info(`Updated ${branch} → ${newCommitSha}`);

            // 8) Link to the commit in the UI
            const commitView = await github.rest.repos.getCommit({
              owner, repo, ref: newCommitSha
            });
            core.info(`Commit URL: ${commitView.data.html_url}`);

      # - uses: stefanzweifel/git-auto-commit-action@v7
      #   with:
      #     commit_message: "chore(lockfile): auto update flake.lock"
      #     commit_user_name: "github-actions[bot]"
      #     commit_user_email: "41898282+github-actions[bot]@users.noreply.github.com"
      #     commit_author: "github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"
      #     file_pattern: "flake.lock"
